// Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤ Telegram
const { updateApplicationStatus, getApplication } = require('../../../lib/db')

const BOT_TOKEN = process.env.BOT_TOKEN

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const update = req.body
    console.log('Received webhook update:', JSON.stringify(update, null, 2))

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
    if (update.callback_query) {
      const callbackQuery = update.callback_query
      const data = callbackQuery.data // approve_123_456789 –∏–ª–∏ reject_123_456789
      const messageId = callbackQuery.message.message_id
      const chatId = callbackQuery.message.chat.id

      console.log('üîî Callback data:', data)

      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
      // –§–æ—Ä–º–∞—Ç: approve_20_123_456789 –∏–ª–∏ approve_10_123_456789 –∏–ª–∏ reject_123_456789
      const parts = data.split('_')
      const action = parts[0] // approve –∏–ª–∏ reject
      const commissionRate = action === 'approve' ? parseInt(parts[1]) : null // 20 –∏–ª–∏ 10
      const applicationId = action === 'approve' ? parts[2] : parts[1]
      const telegramId = action === 'approve' ? parts[3] : parts[2]

      console.log('üìä Parsed:', { action, commissionRate, applicationId, telegramId })

      if (!process.env.DB_HOST) {
        console.error('‚ùå DB_HOST not configured')
        await answerCallback(callbackQuery.id, '‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')
        return res.status(200).json({ ok: true })
      }
      
      console.log('‚úÖ DB_HOST configured:', process.env.DB_HOST)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑–µ
      const newStatus = action === 'approve' ? 'approved' : 'rejected'
      const reviewedBy = callbackQuery.from.username || callbackQuery.from.first_name
      
      console.log('üîÑ Updating application status...', { applicationId, newStatus, commissionRate })
      
      let updatedApplication
      try {
        updatedApplication = await updateApplicationStatus(
          applicationId,
          newStatus,
          commissionRate,
          reviewedBy
        )

        console.log('üìù Updated application:', updatedApplication)

        if (!updatedApplication) {
          console.error('‚ùå Application not found:', applicationId)
          await answerCallback(callbackQuery.id, '‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
          return res.status(200).json({ ok: true })
        }

        console.log('‚úÖ Application status updated:', newStatus, 'commission:', commissionRate, 'promo:', updatedApplication.promo_code)
      } catch (dbError) {
        console.error('‚ùå Database error:', dbError)
        console.error('Error stack:', dbError.stack)
        await answerCallback(callbackQuery.id, '‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ' + dbError.message)
        return res.status(200).json({ ok: true })
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      const statusEmoji = action === 'approve' ? '‚úÖ' : '‚ùå'
      const statusText = action === 'approve' ? `–û–î–û–ë–†–ï–ù–û (${commissionRate}% —Å—Ç–∞–≤–∫–∞)` : '–û–¢–ö–õ–û–ù–ï–ù–û'
      const reviewedByDisplay = callbackQuery.from.username ? `@${callbackQuery.from.username}` : callbackQuery.from.first_name

      await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/editMessageReplyMarkup`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          message_id: messageId,
          reply_markup: {
            inline_keyboard: []
          }
        })
      })

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
      const originalText = callbackQuery.message.text
      const newText = `${originalText}\n\n${statusEmoji} <b>${statusText}</b>\nüë§ –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ: ${reviewedByDisplay}\nüïê ${new Date().toLocaleString('ru-RU')}`

      await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/editMessageText`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: chatId,
          message_id: messageId,
          text: newText,
          parse_mode: 'HTML'
        })
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const notificationText = action === 'approve'
        ? `‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!</b>

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —Å—Ç–∞–ª–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º VEXTR.

üí∞ <b>–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞:</b>
‚Ä¢ 100% –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
‚Ä¢ ${commissionRate}% –æ—Ç –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π

üîó <b>–í–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:</b>
‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://vextr.ru/?ref=${telegramId}
‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥: <code>${updatedApplication.promo_code}</code>

üìä <b>–ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–π –∫–∞–±–∏–Ω–µ—Ç:</b>
https://vextr.ru/partner-dashboard

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Å–≤–æ—ë–º –∫–∞–±–∏–Ω–µ—Ç–µ!`
        : `‚ùå <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.`

      await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: telegramId,
          text: notificationText,
          parse_mode: 'HTML',
          disable_web_page_preview: true
        })
      })

      // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
      console.log('üì§ Sending callback answer...')
      await answerCallback(
        callbackQuery.id,
        action === 'approve' ? '‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞' : '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞'
      )
      console.log('‚úÖ Callback answered successfully')
    }

    console.log('üéâ Webhook processed successfully')
    return res.status(200).json({ ok: true })

  } catch (error) {
    console.error('‚ùå Webhook error:', error)
    console.error('Error stack:', error.stack)
    return res.status(200).json({ ok: true }) // –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 200 –¥–ª—è Telegram
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ callback
async function answerCallback(callbackQueryId, text) {
  await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      callback_query_id: callbackQueryId,
      text: text,
      show_alert: false
    })
  })
}

