// API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫ –∞–¥–º–∏–Ω—É –≤ Telegram

const BOT_TOKEN = process.env.BOT_TOKEN
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID // –í–∞—à Telegram ID

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { application } = req.body

    if (!BOT_TOKEN || !ADMIN_CHAT_ID) {
      console.error('Missing BOT_TOKEN or ADMIN_CHAT_ID')
      return res.status(500).json({ error: 'Telegram not configured' })
    }

    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    const formData = typeof application.form_data === 'string' 
      ? JSON.parse(application.form_data) 
      : application.form_data

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `
üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ!</b>

üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
–§–ò–û: ${formData.fullName}
Telegram: ${formData.telegramNick}
Email: ${formData.email}
${formData.age ? `–í–æ–∑—Ä–∞—Å—Ç: ${formData.age}` : ''}
TG ID: <code>${application.telegram_id}</code>

üìù <b>–û —Å–µ–±–µ:</b>
${formData.aboutYou || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b>
${formData.hasAudience && formData.hasAudience.length > 0 ? formData.hasAudience.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
${formData.socialLinks ? `\nüîó –°–æ—Ü—Å–µ—Ç–∏:\n${formData.socialLinks}` : ''}

üì¢ <b>–ú–µ—Ç–æ–¥—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:</b>
${formData.promotionMethods && formData.promotionMethods.length > 0 ? formData.promotionMethods.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

${formData.promotionDetails ? `<b>–î–µ—Ç–∞–ª–∏:</b>\n${formData.promotionDetails}` : ''}

${formData.targetAudience ? `<b>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</b>\n${formData.targetAudience}` : ''}

üéØ <b>–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>
${formData.expectedResults || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìÖ –ü–æ–¥–∞–Ω–æ: ${new Date(application.submitted_at).toLocaleString('ru-RU')}
`.trim()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Inline –∫–Ω–æ–ø–∫–∞–º–∏
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: ADMIN_CHAT_ID,
        text: message,
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å',
                callback_data: `approve_${application.id}_${application.telegram_id}`
              },
              {
                text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å',
                callback_data: `reject_${application.id}_${application.telegram_id}`
              }
            ]
          ]
        }
      })
    })

    const data = await response.json()

    if (!data.ok) {
      console.error('Telegram API error:', data)
      return res.status(500).json({ error: 'Failed to send Telegram message', details: data })
    }

    console.log('‚úÖ Application sent to admin in Telegram')

    return res.status(200).json({
      success: true,
      message: 'Application sent to admin'
    })

  } catch (error) {
    console.error('Error sending to Telegram:', error)
    return res.status(500).json({
      error: 'Internal server error',
      details: error.message
    })
  }
}

