const { saveApplication } = require('../../lib/db')

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    const { user, formData, submittedAt } = req.body

    console.log('Received application:', {
      telegram_id: user?.id,
      username: user?.username,
      email: formData?.email
    })

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!user || !user.id) {
      return res.status(400).json({ error: 'User data is required' })
    }

    if (!formData || !formData.fullName || !formData.email || !formData.telegramNick) {
      return res.status(400).json({ error: 'Required fields are missing' })
    }

    const applicationData = {
      telegram_id: user.id.toString(),
      username: user.username || null,
      first_name: user.first_name,
      last_name: user.last_name || null,
      photo_url: user.photo_url || null,
      email: formData.email,
      full_name: formData.fullName,
      form_data: formData,
      submitted_at: submittedAt
    }

    let savedData = null
    let dbSuccess = false

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if (process.env.DB_HOST) {
      try {
        savedData = await saveApplication(applicationData)
        dbSuccess = true
        console.log('‚úÖ Application saved to database:', {
          id: savedData.id,
          telegram_id: user.id,
          username: user.username
        })
      } catch (dbError) {
        console.error('‚ùå Database connection error:', dbError)
        console.warn('‚ö†Ô∏è Proceeding without database save')
      }
    } else {
      console.warn('‚ö†Ô∏è Database not configured - application will be logged only')
    }

    // –ï—Å–ª–∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∑–∞—è–≤–∫—É
    if (!dbSuccess) {
      console.log('=== NEW APPLICATION (NO DATABASE) ===')
      console.log(JSON.stringify(applicationData, null, 2))
      console.log('====================================')
    }

    // –í–°–ï–ì–î–ê –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ë–î
    try {
      console.log('üì§ Attempting to send Telegram notification...')
      
      const BOT_TOKEN = process.env.BOT_TOKEN
      const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID

      if (!BOT_TOKEN || !ADMIN_CHAT_ID) {
        console.error('‚ùå Missing BOT_TOKEN or ADMIN_CHAT_ID')
        console.log('BOT_TOKEN exists:', !!BOT_TOKEN)
        console.log('ADMIN_CHAT_ID:', ADMIN_CHAT_ID)
      } else {
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
        const sourceData = savedData || applicationData
        const parsedFormData = sourceData.form_data

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const message = `
üÜï <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ!</b>

üë§ <b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
–§–ò–û: ${parsedFormData.fullName}
Telegram: ${parsedFormData.telegramNick}
Email: ${parsedFormData.email}
${parsedFormData.age ? `–í–æ–∑—Ä–∞—Å—Ç: ${parsedFormData.age}` : ''}
TG ID: <code>${sourceData.telegram_id}</code>

üìù <b>–û —Å–µ–±–µ:</b>
${parsedFormData.aboutYou || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b>
${parsedFormData.hasAudience && parsedFormData.hasAudience.length > 0 ? parsedFormData.hasAudience.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
${parsedFormData.socialLinks ? `\nüîó –°–æ—Ü—Å–µ—Ç–∏:\n${parsedFormData.socialLinks}` : ''}

üì¢ <b>–ú–µ—Ç–æ–¥—ã –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è:</b>
${parsedFormData.promotionMethods && parsedFormData.promotionMethods.length > 0 ? parsedFormData.promotionMethods.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

${parsedFormData.promotionDetails ? `<b>–î–µ—Ç–∞–ª–∏:</b>\n${parsedFormData.promotionDetails}` : ''}

${parsedFormData.targetAudience ? `<b>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è:</b>\n${parsedFormData.targetAudience}` : ''}

üéØ <b>–û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b>
${parsedFormData.expectedResults || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìÖ –ü–æ–¥–∞–Ω–æ: ${new Date(sourceData.submitted_at).toLocaleString('ru-RU')}
        `.trim()

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        const telegramResponse = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            chat_id: ADMIN_CHAT_ID,
            text: message,
            parse_mode: 'HTML',
            reply_markup: {
              inline_keyboard: [[
                { 
                  text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (20%)', 
                  callback_data: savedData 
                    ? `approve_20_${savedData.id}_${savedData.telegram_id}` 
                    : `approve_20_temp_${sourceData.telegram_id}`
                },
                { 
                  text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (10%)', 
                  callback_data: savedData 
                    ? `approve_10_${savedData.id}_${savedData.telegram_id}` 
                    : `approve_10_temp_${sourceData.telegram_id}`
                }
              ], [
                { 
                  text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', 
                  callback_data: savedData 
                    ? `reject_${savedData.id}_${savedData.telegram_id}` 
                    : `reject_temp_${sourceData.telegram_id}`
                }
              ]]
            }
          })
        })

        const telegramData = await telegramResponse.json()
        console.log('üì• Telegram API response:', telegramData)

        if (telegramData.ok) {
          console.log('‚úÖ Notification sent to admin in Telegram')
        } else {
          console.error('‚ùå Telegram API error:', telegramData)
        }
      }
    } catch (telegramError) {
      console.error('‚ùå Telegram notification error:', telegramError.message)
      console.error('Stack:', telegramError.stack)
    }

    return res.status(200).json({
      success: true,
      message: dbSuccess ? 'Application submitted successfully' : 'Application received (database not configured)',
      data: savedData,
      note: !dbSuccess ? 'To save applications permanently, configure Supabase in .env.local' : undefined
    })

  } catch (error) {
    console.error('Error processing application:', error)
    return res.status(500).json({ 
      error: 'Internal server error',
      details: error.message 
    })
  }
}

