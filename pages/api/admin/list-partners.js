// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
const { getAllPartners } = require('../../../lib/db')

export default async function handler(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
    const authHeader = req.headers.authorization
    const apiSecret = process.env.API_SECRET
    const adminChatId = process.env.ADMIN_CHAT_ID

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API_SECRET –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º telegram_id –∏–∑ query
    const telegramId = req.query.telegram_id
    
    if (!apiSecret || authHeader !== `Bearer ${apiSecret}`) {
      // –ï—Å–ª–∏ –Ω–µ—Ç API_SECRET, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ ADMIN_CHAT_ID
      if (!adminChatId || !telegramId || String(telegramId) !== String(adminChatId)) {
        console.error('‚ùå Unauthorized admin access attempt')
        return res.status(401).json({ error: 'Unauthorized' })
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ë–î –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞
    if (!process.env.DB_HOST) {
      console.error('‚ùå Database not configured')
      return res.status(500).json({ 
        error: 'Database not configured',
        message: 'Please configure database connection in .env.local'
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤
    const partners = await getAllPartners()

    console.log('üìä Partners from DB:', partners.length, 'partners')
    console.log('üìã Sample partner data:', partners[0] || 'No partners')

    return res.status(200).json({
      success: true,
      partners: partners
    })

  } catch (error) {
    console.error('‚ùå Error getting partners list:', error)
    return res.status(500).json({ 
      error: 'Internal server error',
      details: error.message 
    })
  }
}

