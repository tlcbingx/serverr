import React, { useState, useEffect } from 'react'
import Head from 'next/head'
import { useRouter } from 'next/router'

import Navigation from '../components/navigation'
import Footer from '../components/footer'

const AffiliateApplication = () => {
  const router = useRouter()
  const [user, setUser] = useState(null)
  const [loading, setLoading] = useState(true)
  const [submitting, setSubmitting] = useState(false)
  const [message, setMessage] = useState('')

  const [formData, setFormData] = useState({
    // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    fullName: '',
    telegramNick: '',
    email: '',
    age: '',
    
    // –û –≤–∞—Å
    aboutYou: '',
    hasAudience: [],
    socialLinks: '',
    
    // –ö–∞–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å
    promotionMethods: [],
    promotionDetails: '',
    targetAudience: '',
    
    // –û–∂–∏–¥–∞–Ω–∏—è –∏ —Ü–µ–ª–∏
    expectedResults: '',
    
    // –°–æ–≥–ª–∞—Å–∏–µ
    agreeToTerms: false
  })

  useEffect(() => {
    const savedUser = localStorage.getItem('telegram_user')
    if (!savedUser) {
      router.push('/register')
      return
    }
    
    const userData = JSON.parse(savedUser)
    setUser(userData)
    
    // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ Telegram username
    setFormData(prev => ({
      ...prev,
      telegramNick: userData.username ? `@${userData.username}` : ''
    }))
    
    setLoading(false)
  }, [router])

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target
    
    if (type === 'checkbox') {
      if (name === 'agreeToTerms') {
        setFormData(prev => ({ ...prev, agreeToTerms: checked }))
      } else {
        setFormData(prev => {
          const currentArray = prev[name] || []
          if (checked) {
            return { ...prev, [name]: [...currentArray, value] }
          } else {
            return { ...prev, [name]: currentArray.filter(item => item !== value) }
          }
        })
      }
    } else if (type === 'radio') {
      setFormData(prev => ({ ...prev, [name]: value }))
    } else {
      setFormData(prev => ({ ...prev, [name]: value }))
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    setSubmitting(true)
    setMessage('')

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!formData.fullName || !formData.telegramNick || !formData.email) {
      setMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è, Telegram –Ω–∏–∫, Email')
      setSubmitting(false)
      return
    }

    if (!formData.agreeToTerms) {
      setMessage('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã')
      setSubmitting(false)
      return
    }

    try {
      const response = await fetch('/api/submit-application', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user: user,
          formData: formData,
          submittedAt: new Date().toISOString()
        })
      })

      const data = await response.json()

      if (response.ok) {
        setMessage('‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.')
        // –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã
        window.scrollTo(0, 0)
      } else {
        setMessage('‚ùå ' + (data.error || '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'))
      }
    } catch (error) {
      console.error('Submit error:', error)
      setMessage('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É')
    } finally {
      setSubmitting(false)
    }
  }

  const handleLogout = () => {
    localStorage.removeItem('telegram_user')
    localStorage.removeItem('auth_token')
    router.push('/register')
  }

  if (loading) {
    return (
      <>
        <Head>
          <title>–ó–∞–≥—Ä—É–∑–∫–∞...</title>
        </Head>
        <Navigation />
        <div style={{
          minHeight: '80vh',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center'
        }}>
          <div style={{
            textAlign: 'center',
            color: '#9FFF00'
          }}>
            <div className="spinner" style={{
              display: 'inline-block',
              width: '48px',
              height: '48px',
              border: '4px solid rgba(159, 255, 0, 0.3)',
              borderTopColor: '#9FFF00',
              borderRadius: '50%',
              animation: 'spin 1s linear infinite'
            }} />
            <p style={{ marginTop: '1rem', fontSize: '1.2rem' }}>–ó–∞–≥—Ä—É–∑–∫–∞...</p>
          </div>
        </div>
        <Footer />
      </>
    )
  }

  return (
    <>
      <Head>
        <title>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É ‚Äî VEXTR</title>
      </Head>
      <Navigation />
      
      <main style={{ paddingTop: 100, paddingBottom: 60 }}>
        <div style={{
          maxWidth: 900,
          margin: '0 auto',
          padding: '0 1.5rem'
        }}>
          {/* –®–∞–ø–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ */}
          <div className="glass-main" style={{
            padding: '1.5rem 2rem',
            marginBottom: '2rem',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center',
            flexWrap: 'wrap',
            gap: '1rem'
          }}>
            <div style={{ display: 'flex', alignItems: 'center', gap: '1rem' }}>
              {user?.photo_url && (
                <img
                  src={user.photo_url}
                  alt={user.first_name}
                  style={{
                    width: 48,
                    height: 48,
                    borderRadius: '50%',
                    border: '2px solid #9FFF00'
                  }}
                />
              )}
              <div>
                <p style={{ 
                  fontSize: '1.1rem', 
                  fontWeight: '600', 
                  color: '#9FFF00',
                  marginBottom: '0.25rem'
                }}>
                  {user?.first_name} {user?.last_name || ''}
                </p>
                <p style={{ 
                  fontSize: '0.9rem', 
                  color: 'rgba(255, 255, 255, 0.6)'
                }}>
                  @{user?.username || 'telegram_user'}
                </p>
              </div>
            </div>
            <button
              onClick={handleLogout}
              style={{
                padding: '0.6rem 1.5rem',
                borderRadius: '50px',
                background: 'rgba(255, 255, 255, 0.1)',
                border: '1px solid rgba(255, 255, 255, 0.3)',
                color: '#ffffff',
                fontSize: '0.9rem',
                fontWeight: '600',
                cursor: 'pointer',
                transition: 'all 0.3s ease'
              }}
              onMouseEnter={(e) => {
                e.target.style.background = 'rgba(255, 255, 255, 0.15)'
                e.target.style.borderColor = 'rgba(255, 255, 255, 0.5)'
              }}
              onMouseLeave={(e) => {
                e.target.style.background = 'rgba(255, 255, 255, 0.1)'
                e.target.style.borderColor = 'rgba(255, 255, 255, 0.3)'
              }}
            >
              –í—ã–π—Ç–∏
            </button>
          </div>

          {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –≤–≤–µ—Ä—Ö—É */}
          {message && (
            <div style={{
              marginBottom: '2rem',
              padding: '1.2rem',
              borderRadius: '12px',
              background: message.includes('—É—Å–ø–µ—à–Ω–æ') || message.includes('‚úÖ')
                ? 'rgba(159, 255, 0, 0.1)' 
                : 'rgba(255, 100, 100, 0.1)',
              border: `1px solid ${
                message.includes('—É—Å–ø–µ—à–Ω–æ') || message.includes('‚úÖ')
                  ? 'rgba(159, 255, 0, 0.3)' 
                  : 'rgba(255, 100, 100, 0.3)'
              }`,
              color: message.includes('—É—Å–ø–µ—à–Ω–æ') || message.includes('‚úÖ')
                ? '#9FFF00' 
                : '#ff6464',
              textAlign: 'center',
              fontSize: '1rem',
              fontWeight: '500'
            }}>
              {message}
            </div>
          )}

          {/* –§–æ—Ä–º–∞ –∑–∞—è–≤–∫–∏ */}
          <div className="glass-main" style={{ padding: '3rem 2.5rem' }}>
            <h1 className="section-title" style={{ 
              textAlign: 'center', 
              marginBottom: '1rem',
              fontSize: '2.5rem'
            }}>
              –ó–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
            </h1>
            
            <p style={{
              fontSize: '1rem',
              color: 'rgba(255, 255, 255, 0.7)',
              marginBottom: '3rem',
              textAlign: 'center',
              lineHeight: '1.6'
            }}>
              –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º VEXTR
            </p>

            <form onSubmit={handleSubmit}>
              {/* –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <h2 style={{
                fontSize: '1.5rem',
                fontWeight: '700',
                color: '#9FFF00',
                marginBottom: '1.5rem',
                marginTop: '2rem',
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem'
              }}>
                üîπ –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
              </h2>
              <p style={{
                fontSize: '0.9rem',
                color: 'rgba(255, 255, 255, 0.6)',
                marginBottom: '2rem',
                marginTop: '-0.5rem'
              }}>
                –ß—Ç–æ–±—ã –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞
              </p>

              <FormInput
                label="–ò–º—è –∏ —Ñ–∞–º–∏–ª–∏—è"
                name="fullName"
                value={formData.fullName}
                onChange={handleChange}
                required
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
              />

              <FormInput
                label="–ù–∏–∫ –≤ Telegram (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                name="telegramNick"
                value={formData.telegramNick}
                onChange={handleChange}
                required
                placeholder="@username"
              />

              <FormInput
                label="Email (–¥–ª—è —Å–≤—è–∑–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)"
                name="email"
                type="email"
                value={formData.email}
                onChange={handleChange}
                required
                placeholder="example@email.com"
              />

              <FormInput
                label="–í–æ–∑—Ä–∞—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
                name="age"
                type="number"
                value={formData.age}
                onChange={handleChange}
                placeholder="25"
              />

              {/* –û –≤–∞—Å */}
              <h2 style={{
                fontSize: '1.5rem',
                fontWeight: '700',
                color: '#9FFF00',
                marginBottom: '1.5rem',
                marginTop: '3rem',
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem'
              }}>
                üîπ –û –≤–∞—Å
              </h2>
              <p style={{
                fontSize: '0.9rem',
                color: 'rgba(255, 255, 255, 0.6)',
                marginBottom: '2rem',
                marginTop: '-0.5rem'
              }}>
                –ß—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫—Ç–æ –≤—ã –∏ —á–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å
              </p>

              <FormTextarea
                label="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ —Å–µ–±–µ (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
                name="aboutYou"
                value={formData.aboutYou}
                onChange={handleChange}
                rows="3"
                placeholder='–ù–∞–ø—Ä–∏–º–µ—Ä: "–Ø –≤–µ–¥—É Telegram-–∫–∞–Ω–∞–ª –æ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ" –∏–ª–∏ "–ó–∞–Ω–∏–º–∞—é—Å—å –æ–±—É—á–µ–Ω–∏–µ–º —Ç—Ä–µ–π–¥–∏–Ω–≥—É"'
              />

              <FormCheckboxGroup
                label="–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –∞—É–¥–∏—Ç–æ—Ä–∏—è / –∫–æ–º—å—é–Ω–∏—Ç–∏?"
                name="hasAudience"
                options={[
                  'Telegram-–∫–∞–Ω–∞–ª',
                  'YouTube / TikTok',
                  'Discord / —Ñ–æ—Ä—É–º',
                  '–ü–æ–∫–∞ –Ω–µ—Ç, —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—é'
                ]}
                selectedValues={formData.hasAudience}
                onChange={handleChange}
              />

              <FormTextarea
                label="–£–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∞—à–∏ —Å–æ—Ü—Å–µ—Ç–∏ / –∫–∞–Ω–∞–ª—ã"
                name="socialLinks"
                value={formData.socialLinks}
                onChange={handleChange}
                rows="3"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: https://t.me/mychannel, https://youtube.com/@mychannel"
              />

              {/* –ö–∞–∫ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å */}
              <h2 style={{
                fontSize: '1.5rem',
                fontWeight: '700',
                color: '#9FFF00',
                marginBottom: '1.5rem',
                marginTop: '3rem',
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem'
              }}>
                üîπ –ö–∞–∫ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å VEXTR?
              </h2>
              <p style={{
                fontSize: '0.9rem',
                color: 'rgba(255, 255, 255, 0.6)',
                marginBottom: '2rem',
                marginTop: '-0.5rem'
              }}>
                –ì–ª–∞–≤–Ω–∞—è —á–∞—Å—Ç—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç—å –∏ –ø–æ–¥—Ö–æ–¥
              </p>

              <FormCheckboxGroup
                label="–ö–∞–∫–∏–º —Å–ø–æ—Å–æ–±–æ–º –≤—ã –±—É–¥–µ—Ç–µ —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å?"
                name="promotionMethods"
                options={[
                  '–û–±–∑–æ—Ä—ã / –≤–∏–¥–µ–æ',
                  '–ü–æ—Å—Ç—ã –≤ Telegram',
                  '–ë–∞–Ω–Ω–µ—Ä—ã / —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏',
                  '–†–∞–±–æ—Ç–∞ —Å —Ç—Ä–µ–π–¥-–∫–æ–º—å—é–Ω–∏—Ç–∏',
                  '–î—Ä—É–≥–æ–µ'
                ]}
                selectedValues={formData.promotionMethods}
                onChange={handleChange}
              />

              <FormTextarea
                label="–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∫–∞–∫ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —ç—Ç–æ –¥–µ–ª–∞—Ç—å"
                name="promotionDetails"
                value={formData.promotionDetails}
                onChange={handleChange}
                rows="4"
                placeholder='–ù–∞–ø—Ä–∏–º–µ—Ä: "–ë—É–¥—É –¥–µ–ª–∞—Ç—å –æ–±–∑–æ—Ä VEXTR –≤ —Å–≤–æ—ë–º Telegram-–∫–∞–Ω–∞–ª–µ" –∏–ª–∏ "–î–æ–±–∞–≤–ª—é –≤ –ø–æ–¥–±–æ—Ä–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç—Ä–µ–π–¥–µ—Ä–æ–≤"'
              />

              <FormTextarea
                label="–ö–∞–∫—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø—Ä–∏–≤–ª–µ—á—å?"
                name="targetAudience"
                value={formData.targetAudience}
                onChange={handleChange}
                rows="3"
                placeholder='–ù–∞–ø—Ä–∏–º–µ—Ä: "–ß–∞—Å—Ç–Ω—ã–µ —Ç—Ä–µ–π–¥–µ—Ä—ã", "–ù–æ–≤–∏—á–∫–∏", "–û–ø—ã—Ç–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–∏–Ω–≤–µ—Å—Ç–æ—Ä—ã"'
              />

              {/* –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
              <h2 style={{
                fontSize: '1.5rem',
                fontWeight: '700',
                color: '#9FFF00',
                marginBottom: '1.5rem',
                marginTop: '3rem',
                display: 'flex',
                alignItems: 'center',
                gap: '0.5rem'
              }}>
                üîπ –û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
              </h2>

              <FormRadioGroup
                label="–ö–∞–∫–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã –æ–∂–∏–¥–∞–µ—Ç–µ –∑–∞ –ø–µ—Ä–≤—ã–π –º–µ—Å—è—Ü?"
                name="expectedResults"
                options={[
                  '10+ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π',
                  '50+ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π',
                  '100+ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π',
                  '–ë–æ–ª–µ–µ 200 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π'
                ]}
                selectedValue={formData.expectedResults}
                onChange={handleChange}
              />

              {/* –°–æ–≥–ª–∞—Å–∏–µ */}
              <div style={{
                marginTop: '3rem',
                marginBottom: '2rem',
                padding: '1.5rem',
                background: 'rgba(159, 255, 0, 0.05)',
                border: '1px solid rgba(159, 255, 0, 0.2)',
                borderRadius: '12px'
              }}>
                <label style={{
                  display: 'flex',
                  alignItems: 'flex-start',
                  gap: '0.75rem',
                  cursor: 'pointer',
                  userSelect: 'none'
                }}>
                  <input
                    type="checkbox"
                    name="agreeToTerms"
                    checked={formData.agreeToTerms}
                    onChange={handleChange}
                    required
                    style={{
                      width: '20px',
                      height: '20px',
                      marginTop: '2px',
                      cursor: 'pointer',
                      accentColor: '#9FFF00'
                    }}
                  />
                  <span style={{
                    fontSize: '0.95rem',
                    color: 'rgba(255, 255, 255, 0.9)',
                    lineHeight: '1.6'
                  }}>
                    –Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å —Å{' '}
                    <a href="/affiliate-terms" target="_blank" style={{ color: '#9FFF00', textDecoration: 'underline' }}>
                      –ø—Ä–∞–≤–∏–ª–∞–º–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã
                    </a>
                    {' '}–∏{' '}
                    <a href="/privacy" target="_blank" style={{ color: '#9FFF00', textDecoration: 'underline' }}>
                      –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    </a>
                  </span>
                </label>
              </div>

              {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
              <button
                type="submit"
                disabled={submitting || !formData.agreeToTerms}
                style={{
                  width: '100%',
                  padding: '1.2rem',
                  borderRadius: '50px',
                  background: (submitting || !formData.agreeToTerms)
                    ? 'rgba(159, 255, 0, 0.3)' 
                    : '#9FFF00',
                  border: 'none',
                  color: '#000000',
                  fontSize: '1.1rem',
                  fontWeight: '700',
                  cursor: (submitting || !formData.agreeToTerms) ? 'not-allowed' : 'pointer',
                  transition: 'all 0.3s ease',
                  boxShadow: (submitting || !formData.agreeToTerms)
                    ? 'none' 
                    : '0 0 20px rgba(159, 255, 0, 0.4)',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  gap: '0.75rem'
                }}
                onMouseEnter={(e) => {
                  if (!submitting && formData.agreeToTerms) {
                    e.target.style.transform = 'scale(1.02)'
                    e.target.style.boxShadow = '0 0 30px rgba(159, 255, 0, 0.6)'
                  }
                }}
                onMouseLeave={(e) => {
                  e.target.style.transform = 'scale(1)'
                  e.target.style.boxShadow = '0 0 20px rgba(159, 255, 0, 0.4)'
                }}
              >
                {submitting ? (
                  <>
                    <div className="spinner" style={{
                      width: '20px',
                      height: '20px',
                      border: '3px solid rgba(0, 0, 0, 0.3)',
                      borderTopColor: '#000000',
                      borderRadius: '50%',
                      animation: 'spin 1s linear infinite'
                    }} />
                    –û—Ç–ø—Ä–∞–≤–∫–∞...
                  </>
                ) : (
                  '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'
                )}
              </button>
            </form>
          </div>
        </div>
      </main>
      
      <Footer />
      
      <style jsx>{`
        @keyframes spin {
          to { transform: rotate(360deg); }
        }
      `}</style>
    </>
  )
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
const FormInput = ({ label, name, type = 'text', value, onChange, required, placeholder }) => (
  <div style={{ marginBottom: '1.5rem' }}>
    <label style={{
      display: 'block',
      fontSize: '1rem',
      fontWeight: '600',
      marginBottom: '0.5rem',
      color: 'rgba(255, 255, 255, 0.9)'
    }}>
      {label} {required && <span style={{ color: '#ff6464' }}>*</span>}
    </label>
    <input
      type={type}
      name={name}
      value={value}
      onChange={onChange}
      placeholder={placeholder}
      required={required}
      style={{
        width: '100%',
        padding: '0.9rem 1rem',
        borderRadius: '12px',
        border: '1px solid rgba(255, 255, 255, 0.2)',
        background: 'rgba(255, 255, 255, 0.05)',
        color: '#ffffff',
        fontSize: '0.95rem',
        outline: 'none',
        transition: 'all 0.3s ease'
      }}
      onFocus={(e) => {
        e.target.style.borderColor = '#9FFF00'
        e.target.style.background = 'rgba(159, 255, 0, 0.05)'
      }}
      onBlur={(e) => {
        e.target.style.borderColor = 'rgba(255, 255, 255, 0.2)'
        e.target.style.background = 'rgba(255, 255, 255, 0.05)'
      }}
    />
  </div>
)

const FormTextarea = ({ label, name, value, onChange, required, placeholder, rows = 4 }) => (
  <div style={{ marginBottom: '1.5rem' }}>
    <label style={{
      display: 'block',
      fontSize: '1rem',
      fontWeight: '600',
      marginBottom: '0.5rem',
      color: 'rgba(255, 255, 255, 0.9)'
    }}>
      {label} {required && <span style={{ color: '#ff6464' }}>*</span>}
    </label>
    <textarea
      name={name}
      value={value}
      onChange={onChange}
      placeholder={placeholder}
      rows={rows}
      required={required}
      style={{
        width: '100%',
        padding: '0.9rem 1rem',
        borderRadius: '12px',
        border: '1px solid rgba(255, 255, 255, 0.2)',
        background: 'rgba(255, 255, 255, 0.05)',
        color: '#ffffff',
        fontSize: '0.95rem',
        outline: 'none',
        transition: 'all 0.3s ease',
        resize: 'vertical',
        fontFamily: 'inherit',
        lineHeight: '1.6'
      }}
      onFocus={(e) => {
        e.target.style.borderColor = '#9FFF00'
        e.target.style.background = 'rgba(159, 255, 0, 0.05)'
      }}
      onBlur={(e) => {
        e.target.style.borderColor = 'rgba(255, 255, 255, 0.2)'
        e.target.style.background = 'rgba(255, 255, 255, 0.05)'
      }}
    />
  </div>
)

const FormCheckboxGroup = ({ label, name, options, selectedValues, onChange }) => (
  <div style={{ marginBottom: '1.5rem' }}>
    <label style={{
      display: 'block',
      fontSize: '1rem',
      fontWeight: '600',
      marginBottom: '0.75rem',
      color: 'rgba(255, 255, 255, 0.9)'
    }}>
      {label}
    </label>
    <div style={{ display: 'flex', flexDirection: 'column', gap: '0.6rem' }}>
      {options.map((option, index) => (
        <label key={index} style={{
          display: 'flex',
          alignItems: 'center',
          gap: '0.6rem',
          cursor: 'pointer',
          userSelect: 'none',
          padding: '0.6rem 0.8rem',
          borderRadius: '8px',
          background: selectedValues.includes(option) ? 'rgba(159, 255, 0, 0.1)' : 'transparent',
          transition: 'all 0.2s ease'
        }}
        onMouseEnter={(e) => e.currentTarget.style.background = 'rgba(159, 255, 0, 0.05)'}
        onMouseLeave={(e) => e.currentTarget.style.background = selectedValues.includes(option) ? 'rgba(159, 255, 0, 0.1)' : 'transparent'}
        >
          <input
            type="checkbox"
            name={name}
            value={option}
            checked={selectedValues.includes(option)}
            onChange={onChange}
            style={{
              width: '18px',
              height: '18px',
              cursor: 'pointer',
              accentColor: '#9FFF00'
            }}
          />
          <span style={{ fontSize: '0.95rem', color: 'rgba(255, 255, 255, 0.9)' }}>
            {option}
          </span>
        </label>
      ))}
    </div>
  </div>
)

const FormRadioGroup = ({ label, name, options, selectedValue, onChange }) => (
  <div style={{ marginBottom: '1.5rem' }}>
    <label style={{
      display: 'block',
      fontSize: '1rem',
      fontWeight: '600',
      marginBottom: '0.75rem',
      color: 'rgba(255, 255, 255, 0.9)'
    }}>
      {label}
    </label>
    <div style={{ display: 'flex', flexDirection: 'column', gap: '0.6rem' }}>
      {options.map((option, index) => (
        <label key={index} style={{
          display: 'flex',
          alignItems: 'center',
          gap: '0.6rem',
          cursor: 'pointer',
          userSelect: 'none',
          padding: '0.6rem 0.8rem',
          borderRadius: '8px',
          background: selectedValue === option ? 'rgba(159, 255, 0, 0.1)' : 'transparent',
          transition: 'all 0.2s ease'
        }}
        onMouseEnter={(e) => e.currentTarget.style.background = 'rgba(159, 255, 0, 0.05)'}
        onMouseLeave={(e) => e.currentTarget.style.background = selectedValue === option ? 'rgba(159, 255, 0, 0.1)' : 'transparent'}
        >
          <input
            type="radio"
            name={name}
            value={option}
            checked={selectedValue === option}
            onChange={onChange}
            style={{
              width: '18px',
              height: '18px',
              cursor: 'pointer',
              accentColor: '#9FFF00'
            }}
          />
          <span style={{ fontSize: '0.95rem', color: 'rgba(255, 255, 255, 0.9)' }}>
            {option}
          </span>
        </label>
      ))}
    </div>
  </div>
)

export default AffiliateApplication
